import altair as alt
import pandas as pd
import streamlit as st

st.set_page_config(layout="wide")

df = pd.DataFrame(
    {
        "models": [
            "KNN",
            "KNN",
            "KNN",
            "Logistic Regression",
            "Logistic Regression",
            "Logistic Regression",
            "Gaussian NB",
            "Gaussian NB",
            "Gaussian NB",
            "Linear SVC",
            "Linear SVC",
            "Linear SVC",
            "Decision Tree",
            "Decision Tree",
            "Decision Tree",
            "Random Forest",
            "Random Forest",
            "Random Forest",
            "AdaBoost",
            "AdaBoost",
            "AdaBoost",
            "XGBoost",
            "XGBoost",
            "XGBoost",
            "LightGBM",
            "LightGBM",
            "LightGBM",
            "CatBoost",
            "CatBoost",
            "CatBoost",
        ],
        "recall_1": [
            0.32298666666666664,
            0.41823999999999995,
            0.4183796856106409,
            0.49749333333333334,
            0.49749333333333323,
            0.4921402660217654,
            0.4027733333333333,
            0.45439999999999997,
            0.4467956469165659,
            0.4938666666666666,
            0.49589333333333335,
            0.49334945586457074,
            0.12896000000000002,
            0.4174933333333334,
            0.4189842805320435,
            0.5136000000000001,
            0.53152,
            0.5169286577992744,
            0.5278933333333333,
            0.5438933333333333,
            0.533857315598549,
            0.5266133333333334,
            0.5536,
            0.1,
            0.54752,
            0.5546666666666666,
            0.1,
            0.5557333333333333,
            0.5595733333333334,
            0.1,
        ],
        "folds": [
            "Cross-Validation (Untuned)",
            "Cross-Validation",
            "Testing",
            "Cross-Validation (Untuned)",
            "Cross-Validation",
            "Testing",
            "Cross-Validation (Untuned)",
            "Cross-Validation",
            "Testing",
            "Cross-Validation (Untuned)",
            "Cross-Validation",
            "Testing",
            "Cross-Validation (Untuned)",
            "Cross-Validation",
            "Testing",
            "Cross-Validation (Untuned)",
            "Cross-Validation",
            "Testing",
            "Cross-Validation (Untuned)",
            "Cross-Validation",
            "Testing",
            "Cross-Validation (Untuned)",
            "Cross-Validation",
            "Testing",
            "Cross-Validation (Untuned)",
            "Cross-Validation",
            "Testing",
            "Cross-Validation (Untuned)",
            "Cross-Validation",
            "Testing",
        ],
    }
)

st.altair_chart(
    alt.Chart(
        data=df,
        title=alt.TitleParams(
            text="Final Evaluation by Recall Score",
            anchor="start",
        ),
    )
    .mark_bar()
    .encode(
        x=alt.X(
            shorthand="models:N",
            title="Models",
            axis=alt.Axis(labelAngle=-45),
            sort=df["models"].drop_duplicates().tolist(),
        ),
        xOffset=alt.XOffset(
            shorthand="folds:N",
            title="Folds",
            sort=df["folds"].drop_duplicates().tolist(),
        ),
        y=alt.Y("recall_1:Q", title="Recall Score"),
        color=alt.Color(
            "folds:N",
            title="Folds",
            sort=df["folds"].drop_duplicates().tolist(),
        ),
    ),
    use_container_width=True,
    theme=None,
)
